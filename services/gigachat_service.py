import os
import json
import re
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)


class GigaChatService:
    def __init__(self):
        try:
            credentials = os.getenv("GIGACHAT_CREDENTIALS")

            if not credentials:
                raise ValueError("GIGACHAT_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            from langchain_gigachat.chat_models import GigaChat
            from langchain_core.prompts import ChatPromptTemplate
            from langchain_core.output_parsers import StrOutputParser

            self.model = GigaChat(
                model="GigaChat-2-Max",
                verify_ssl_certs=False,
                credentials=credentials,
                timeout=120
            )
            self.parser = StrOutputParser()
            logger.info("‚úÖ GigaChat initialized successfully")

        except Exception as e:
            logger.error(f"‚ùå Failed to initialize GigaChat: {e}")
            raise

    def analyze_contract(self, contract_text: str, law_articles: str, law_type: str) -> Dict[str, Any]:

        logger.info(f"üîß Starting GigaChat analysis for {law_type}")

        prompt_template = """
        –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞–∫—É–ø–∫–∞–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É {law_type}.

        –î–û–°–¢–£–ü–ù–´–ï –°–¢–ê–¢–¨–ò –ó–ê–ö–û–ù–ê:
        {law_articles}

        –ö–û–ù–¢–†–ê–ö–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
        {contract_text}

        –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
        1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–∞
        2. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å—Ç–∞—Ç—å—è–º
        3. –ü—Ä–∏ –≤—ã—è–≤–ª–µ–Ω–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π —É–∫–∞–∑—ã–≤–∞–π –¢–û–ß–ù–´–ï –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–°—Ç–∞—Ç—å—è 34", "—á–∞—Å—Ç—å 2 —Å—Ç–∞—Ç—å–∏ 95")
        4. –§–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        5. –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –∏–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑

        –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ –≤ JSON):
        {{
            "compliance_status": "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç|—á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç|–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç",
            "summary": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ",
            "issues": [
                {{
                    "article": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏ –∏ —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–°—Ç–∞—Ç—å—è 34 —á–∞—Å—Ç—å 1')",
                    "issue": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É–Ω–∫—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞",
                    "recommendation": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"
                }}
            ]
        }}

        –í–ê–ñ–ù–û: 
        - –£–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞—Ç–µ–π –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞
        - –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—å–∏
        - –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º
        """

        try:
            from langchain_core.prompts import ChatPromptTemplate
            from langchain_core.output_parsers import StrOutputParser

            prompt = ChatPromptTemplate.from_template(prompt_template)
            chain = prompt | self.model | self.parser

            response = chain.invoke({
                "law_type": law_type.upper(),
                "law_articles": law_articles[:12000],  # –£–≤–µ–ª–∏—á–∏–ª –ª–∏–º–∏—Ç
                "contract_text": contract_text[:10000]  # –£–≤–µ–ª–∏—á–∏–ª –ª–∏–º–∏—Ç
            })

            logger.info(f"üîß GigaChat raw response: {response[:200]}...")
            return self._parse_response(response)

        except Exception as e:
            logger.error(f"‚ùå GigaChat analysis error: {e}")
            return {
                "compliance_status": "–æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
                "issues": [{
                    "article": "—Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
                    "issue": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}",
                    "recommendation": "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
                }],
                "summary": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
            }

    def _parse_response(self, response: str) -> Dict[str, Any]:

        try:

            cleaned_response = response.strip()


            start = cleaned_response.find('{')
            end = cleaned_response.rfind('}') + 1

            if start != -1 and end != 0:
                json_str = cleaned_response[start:end]
                logger.info(f"üîß Found JSON: {json_str[:100]}...")
                parsed = json.loads(json_str)


                if not isinstance(parsed, dict):
                    raise ValueError("–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º")

                if 'compliance_status' not in parsed:
                    parsed['compliance_status'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'

                if 'issues' not in parsed or not isinstance(parsed['issues'], list):
                    parsed['issues'] = []

                if 'summary' not in parsed:
                    parsed['summary'] = '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'


                for issue in parsed['issues']:
                    if 'article' in issue:

                        issue['article'] = re.sub(r'[–°—Å]—Ç–∞—Ç—å—è\s*', '–°—Ç–∞—Ç—å—è ', issue['article'])
                        issue['article'] = re.sub(r'\s+', ' ', issue['article']).strip()

                logger.info("‚úÖ JSON parsed and validated successfully")
                return parsed
            else:
                logger.warning("‚ùå No JSON found in response, using fallback")
                raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")

        except Exception as e:
            logger.error(f"‚ùå JSON parse error: {e}")


            fallback_issues = []
            if "—Å—Ç–∞—Ç—å—è" in response.lower():
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç–∞—Ç–µ–π
                article_matches = re.finditer(r'[–°—Å]—Ç–∞—Ç—å—è\s+(\d+(?:\.\d+)*[\s\S]*?)(?=[–°—Å]—Ç–∞—Ç—å—è|$)', response)
                for match in article_matches:
                    fallback_issues.append({
                        "article": f"–°—Ç–∞—Ç—å—è {match.group(1).strip()}",
                        "issue": "–ù–∞—Ä—É—à–µ–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–æ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ",
                        "recommendation": "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
                    })

            return {
                "compliance_status": "—Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏",
                "issues": fallback_issues if fallback_issues else [{
                    "article": "—Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞",
                    "issue": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI",
                    "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤—Ä—É—á–Ω—É—é"
                }],
                "summary": response[:1000] if response else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"
            }