import os
import json
import re
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)


class GigaChatService:
    def __init__(self):
        try:
            credentials = os.getenv("GIGACHAT_CREDENTIALS")

            if not credentials:
                raise ValueError("GIGACHAT_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            from langchain_gigachat.chat_models import GigaChat
            from langchain_core.prompts import ChatPromptTemplate
            from langchain_core.output_parsers import StrOutputParser

            self.model = GigaChat(
                model="GigaChat-2",
                verify_ssl_certs=False,
                credentials=credentials,
                timeout=120
            )
            self.parser = StrOutputParser()
            logger.info("‚úÖ GigaChat initialized successfully")

        except Exception as e:
            logger.error(f"‚ùå Failed to initialize GigaChat: {e}")
            raise

    def analyze_contract(self, contract_text: str, law_articles: str, law_type: str) -> Dict[str, Any]:

        logger.info(f"üîß Starting GigaChat analysis for {law_type}")


        prompt_template = """
        –¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏ –≤—ã–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ —Å–º—ã—Å–ª—É.
        
        –ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç ‚Äî –≤—ã–¥–µ—Ä–∂–∫–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {law_type}.
        –í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç ‚Äî –∫–æ–Ω—Ç—Ä–∞–∫—Ç.
        
        –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å:
        1. –ì–¥–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è–º –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        2. –ì–¥–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å.
        3. –î–∞–π –∫—Ä–∞—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É—Ç–æ—á–Ω–µ–Ω–∏—é –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞.
        
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ –≤ JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞):
        {{
          "compliance_status": "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç|—á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç|–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç",
          "summary": "–∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤—ã–≤–æ–¥–∞",
          "issues": [
            {{
              "article": "–Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)",
              "issue": "–æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è",
              "recommendation": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"
            }}
          ]
        }}
        
        –¢–ï–ö–°–¢ –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø ‚Ññ1 (—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞):
        {law_articles}
        
        –¢–ï–ö–°–¢ –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø ‚Ññ2 (–∫–æ–Ω—Ç—Ä–∞–∫—Ç):
        {contract_text}
        
        –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
        """


        try:
            from langchain_core.prompts import ChatPromptTemplate
            from langchain_core.output_parsers import StrOutputParser

            prompt = ChatPromptTemplate.from_template(prompt_template)
            chain = prompt | self.model | self.parser

            response = chain.invoke({
                "law_type": law_type.upper(),
                "law_articles": law_articles[:8000],  # –£–≤–µ–ª–∏—á–∏–ª –ª–∏–º–∏—Ç
                "contract_text": contract_text[:6000]  # –£–≤–µ–ª–∏—á–∏–ª –ª–∏–º–∏—Ç
            })

            logger.info(f"üîß GigaChat raw response: {response[:200]}...")
            return self._parse_response(response)

        except Exception as e:
            logger.error(f"‚ùå GigaChat analysis error: {e}")
            return {
                "compliance_status": "–æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
                "issues": [{
                    "article": "—Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
                    "issue": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}",
                    "recommendation": "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
                }],
                "summary": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
            }

    def _parse_response(self, response: str) -> Dict[str, Any]:

        try:

            cleaned_response = response.strip()


            start = cleaned_response.find('{')
            end = cleaned_response.rfind('}') + 1

            if start != -1 and end != 0:
                json_str = cleaned_response[start:end]
                logger.info(f"üîß Found JSON: {json_str[:100]}...")
                parsed = json.loads(json_str)


                if not isinstance(parsed, dict):
                    raise ValueError("–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º")

                if 'compliance_status' not in parsed:
                    parsed['compliance_status'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'

                if 'issues' not in parsed or not isinstance(parsed['issues'], list):
                    parsed['issues'] = []

                if 'summary' not in parsed:
                    parsed['summary'] = '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'


                for issue in parsed['issues']:
                    if 'article' in issue:

                        issue['article'] = re.sub(r'[–°—Å]—Ç–∞—Ç—å—è\s*', '–°—Ç–∞—Ç—å—è ', issue['article'])
                        issue['article'] = re.sub(r'\s+', ' ', issue['article']).strip()

                logger.info("‚úÖ JSON parsed and validated successfully")
                return parsed
            else:
                logger.warning("‚ùå No JSON found in response, using fallback")
                raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")

        except Exception as e:
            logger.error(f"‚ùå JSON parse error: {e}")


            fallback_issues = []
            if "—Å—Ç–∞—Ç—å—è" in response.lower():
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç–∞—Ç–µ–π
                article_matches = re.finditer(r'[–°—Å]—Ç–∞—Ç—å—è\s+(\d+(?:\.\d+)*[\s\S]*?)(?=[–°—Å]—Ç–∞—Ç—å—è|$)', response)
                for match in article_matches:
                    fallback_issues.append({
                        "article": f"–°—Ç–∞—Ç—å—è {match.group(1).strip()}",
                        "issue": "–ù–∞—Ä—É—à–µ–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–æ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ",
                        "recommendation": "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
                    })

            return {
                "compliance_status": "—Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏",
                "issues": fallback_issues if fallback_issues else [{
                    "article": "—Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞",
                    "issue": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI",
                    "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤—Ä—É—á–Ω—É—é"
                }],
                "summary": response[:1000] if response else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"
            }