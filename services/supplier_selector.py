# services/supplier_selector.py
from database.db_connection import Database
import logging

logger = logging.getLogger(__name__)


class SupplierSelector:
    def __init__(self):
        self.db = Database()
        self._ensure_suppliers_table()
        self._ensure_initial_data()

    def _ensure_suppliers_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        conn = self.db.get_connection()
        cursor = conn.cursor()

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS suppliers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                category TEXT NOT NULL,
                purchase_method TEXT NOT NULL,
                rating REAL NOT NULL,
                contracts_count INTEGER NOT NULL,
                total_sum REAL NOT NULL
            )
        ''')

        cursor.close()
        conn.close()

    def _ensure_initial_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –Ω–µ—Ç - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ–º–æ"""
        conn = self.db.get_connection()
        cursor = conn.cursor()

        cursor.execute("SELECT COUNT(*) FROM suppliers")
        count = cursor.fetchone()[0]

        if count == 0:
            logger.info("üîÑ –ë–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø—É—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...")
            self._load_demo_suppliers()
        else:
            logger.info(f"‚úÖ –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {count} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

        cursor.close()
        conn.close()

    def _load_demo_suppliers(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ"""
        conn = self.db.get_connection()
        cursor = conn.cursor()

        demo_suppliers = [
            ("–¢–û–û –ö–∞–∑–°—Ç—Ä–æ–π–ü—Ä–æ–º", "–†–∞–±–æ—Ç–∞", "–ò–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—É—Ç–µ–º –ø—Ä—è–º–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞", 4.8, 122,
             1200000000),
            ("–¢–û–û –≠–Ω–µ—Ä–≥–æ–°–Ω–∞–±", "–¢–æ–≤–∞—Ä", "–ê—É–∫—Ü–∏–æ–Ω (—Å 2022)", 4.6, 98, 900000000),
            ("–¢–û–û –ú–µ–¥–°–Ω–∞–±", "–£—Å–ª—É–≥–∞", "–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π", 4.7, 150, 1050000000),
            ("–¢–û–û –°–æ—Ñ—Ç–õ–∞–π–Ω", "–£—Å–ª—É–≥–∞", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω", 4.9, 75, 850000000),
            ("–¢–û–û –¢—Ä–∞–Ω—Å–õ–æ–≥–∏—Å—Ç–∏–∫", "–£—Å–ª—É–≥–∞", "–û—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–Ω–∫—É—Ä—Å", 4.5, 110, 970000000),
            ("–¢–û–û –ö–∞–∑–•–∏–º", "–¢–æ–≤–∞—Ä", "–ö–æ–Ω–∫—É—Ä—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ-–±–∞–ª–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", 4.4, 85, 800000000),
            ("–¢–û–û CleanCity", "–£—Å–ª—É–≥–∞", "–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π", 4.2, 120, 450000000),
            ("–¢–û–û –ê—Å—Ç–∞–Ω–∞–°—Ç—Ä–æ–π", "–†–∞–±–æ—Ç–∞", "–ö–æ–Ω–∫—É—Ä—Å –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É ¬´–ø–æ–¥ –∫–ª—é—á¬ª", 4.9, 130, 1500000000),
            ("–¢–û–û AgroLine", "–¢–æ–≤–∞—Ä", "–ß–µ—Ä–µ–∑ —Ç–æ–≤–∞—Ä–Ω—ã–µ –±–∏—Ä–∂–∏", 4.3, 115, 770000000),
            ("–¢–û–û MegaFood", "–¢–æ–≤–∞—Ä", "–ê—É–∫—Ü–∏–æ–Ω (—Å 2022)", 4.6, 160, 1300000000),
        ]

        cursor.executemany('''
            INSERT INTO suppliers (name, category, purchase_method, rating, contracts_count, total_sum)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', demo_suppliers)

        conn.commit()
        cursor.close()
        conn.close()

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(demo_suppliers)} –¥–µ–º–æ-–ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

    def get_top_suppliers(self, purchase_method: str, category: str, limit: int = 50):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¢–û–ü-N –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        return self.get_filtered_suppliers(purchase_method, category, limit)

    def get_all_purchase_methods(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–∫—É–ø–æ–∫ –∏–∑ –±–∞–∑—ã"""
        conn = self.db.get_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT DISTINCT purchase_method 
            FROM suppliers 
            ORDER BY purchase_method
        ''')

        methods = [row[0] for row in cursor.fetchall()]
        cursor.close()
        conn.close()

        # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –º–∞–ª–æ –º–µ—Ç–æ–¥–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        if len(methods) < 5:
            methods.extend([
                "–ò–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—É—Ç–µ–º –ø—Ä—è–º–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞",
                "–ê—É–∫—Ü–∏–æ–Ω (—Å 2022)",
                "–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
                "–û—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–Ω–∫—É—Ä—Å",
                "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω"
            ])
            methods = list(set(methods))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            methods.sort()

        return methods

    def get_filtered_suppliers(self, purchase_method: str = None, category: str = None, limit: int = 50):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)"""
        conn = self.db.get_connection()
        cursor = conn.cursor()

        query = '''
            SELECT name, category, purchase_method, rating, contracts_count, total_sum
            FROM suppliers
            WHERE 1=1
        '''
        params = []

        if purchase_method:
            query += ' AND purchase_method LIKE ?'
            params.append(f'%{purchase_method}%')

        if category:
            query += ' AND category LIKE ?'
            params.append(f'%{category}%')

        query += ' ORDER BY rating DESC, contracts_count DESC, total_sum DESC LIMIT ?'
        params.append(limit)

        cursor.execute(query, params)
        rows = cursor.fetchall()
        cursor.close()
        conn.close()

        suppliers = []
        for row in rows:
            suppliers.append({
                'name': row[0],
                'category': row[1],
                'purchase_method': row[2],
                'rating': row[3],
                'contracts_count': row[4],
                'total_sum': row[5]
            })

        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(suppliers)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è {purchase_method}/{category}")
        return suppliers



    def get_all_categories(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã"""
        conn = self.db.get_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT DISTINCT category 
            FROM suppliers 
            ORDER BY category
        ''')

        categories = [row[0] for row in cursor.fetchall()]
        cursor.close()
        conn.close()

        # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –º–∞–ª–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        if len(categories) < 3:
            categories.extend(["–¢–æ–≤–∞—Ä", "–†–∞–±–æ—Ç–∞", "–£—Å–ª—É–≥–∞"])
            categories = list(set(categories))
            categories.sort()

        return categories

    def search_categories(self, query: str):
        """–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é"""
        all_categories = self.get_all_categories()
        return [cat for cat in all_categories if query.lower() in cat.lower()][:10]

    def search_purchase_methods(self, query: str):
        """–ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞–∫—É–ø–∫–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é"""
        all_methods = self.get_all_purchase_methods()
        return [method for method in all_methods if query.lower() in method.lower()][:10]

    def get_suppliers_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º"""
        conn = self.db.get_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT 
                COUNT(*) as total_suppliers,
                COUNT(DISTINCT purchase_method) as unique_methods,
                COUNT(DISTINCT category) as unique_categories
            FROM suppliers
        ''')

        stats = dict(cursor.fetchone())

        cursor.close()
        conn.close()

        return stats