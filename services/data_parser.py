# services/data_parser.py
import requests
from bs4 import BeautifulSoup
import logging
from database.db_connection import Database
import time
import random
import urllib.parse

logger = logging.getLogger(__name__)


class GosZakupParser:
    def __init__(self):
        self.db = Database()
        self.base_url = "https://www.goszakup.gov.kz"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })

    def parse_all_suppliers(self):
        """–ü–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –í–°–ï–• –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞–∫—É–ø–∫–∏ –∏ –≤–∏–¥–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        all_purchase_methods = self.get_available_purchase_methods()
        all_subject_types = self.get_available_subject_types()

        all_suppliers = []

        for purchase_method in all_purchase_methods:
            for subject_type in all_subject_types:
                try:
                    logger.info(f"üï∏Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è {purchase_method} / {subject_type}")
                    suppliers = self.parse_suppliers_by_params(purchase_method, subject_type)
                    all_suppliers.extend(suppliers)

                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
                    time.sleep(2)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {purchase_method}/{subject_type}: {e}")
                    continue

        logger.info(f"‚úÖ –í—Å–µ–≥–æ —Å–ø–∞—Ä—à–µ–Ω–æ {len(all_suppliers)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        return all_suppliers

    def parse_suppliers_by_params(self, purchase_method, subject_type):
        """–ü–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–ø–æ—Å–æ–±—É –∑–∞–∫—É–ø–∫–∏ –∏ –≤–∏–¥—É –ø—Ä–µ–¥–º–µ—Ç–∞"""
        try:
            # –ö–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è URL
            encoded_method = urllib.parse.quote(purchase_method)
            encoded_subject = urllib.parse.quote(subject_type)

            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            url = f"https://www.goszakup.gov.kz/ru/top/suppliers?purchase_method={encoded_method}&subject_type={encoded_subject}&sort=count"

            response = self.session.get(url, timeout=30)
            response.raise_for_status()

            soup = BeautifulSoup(response.content, 'html.parser')

            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏
            table = soup.find('table')
            if not table:
                logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {purchase_method}/{subject_type}")
                return []

            suppliers = []
            rows = table.find_all('tr')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

            for i, row in enumerate(rows):
                cols = row.find_all('td')
                if len(cols) >= 5:
                    try:
                        supplier_data = self._parse_supplier_row(cols, i)
                        if supplier_data:
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                            supplier_data['purchase_method'] = purchase_method
                            supplier_data['category'] = subject_type
                            suppliers.append(supplier_data)
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
                        continue

            logger.info(f"‚úÖ –°–ø–∞—Ä—à–µ–Ω–æ {len(suppliers)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è {purchase_method} / {subject_type}")
            return suppliers

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {purchase_method}/{subject_type}: {e}")
            return []

    def _parse_supplier_row(self, cols, position):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
        try:
            # –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
            rank = position + 1

            # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            name_elem = cols[1].find('a') or cols[1]
            name = name_elem.get_text(strip=True)

            # –ë–ò–ù
            bin_number = cols[2].get_text(strip=True)

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            contracts_text = cols[3].get_text(strip=True).replace(' ', '')
            contracts_count = int(contracts_text) if contracts_text else 0

            # –°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            sum_text = cols[4].get_text(strip=True)
            total_sum = self._parse_sum(sum_text)

            if not name:
                return None

            return {
                'name': name,
                'bin': bin_number,
                'contracts_count': contracts_count,
                'total_sum': total_sum,
                'rank': rank
            }

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
            return None

    def _parse_sum(self, sum_text):
        """–ü–∞—Ä—Å–∏—Ç —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            if not sum_text:
                return 0

            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            clean_text = sum_text.replace(' ', '').replace('‚Ç∏', '').replace(',', '.').strip()

            if '–º–ª–Ω' in clean_text.lower():
                number = float(clean_text.lower().replace('–º–ª–Ω', '').strip())
                return int(number * 1000000)
            elif '–º–ª—Ä–¥' in clean_text.lower():
                number = float(clean_text.lower().replace('–º–ª—Ä–¥', '').strip())
                return int(number * 1000000000)
            else:
                return int(float(clean_text))

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—É–º–º—ã '{sum_text}': {e}")
            return 0

    def update_all_suppliers(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –í–°–ï–• –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            all_suppliers = self.parse_all_suppliers()

            if not all_suppliers:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞")
                return False

            conn = self.db.get_connection()
            cursor = conn.cursor()

            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("DELETE FROM suppliers")

            # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï–• –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
            for supplier in all_suppliers:
                rating = self._calculate_unique_rating(
                    supplier['rank'],
                    supplier['contracts_count'],
                    supplier['total_sum']
                )

                cursor.execute('''
                    INSERT INTO suppliers 
                    (name, category, purchase_method, rating, contracts_count, total_sum)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (
                    supplier['name'],
                    supplier['category'],
                    supplier['purchase_method'],
                    rating,
                    supplier['contracts_count'],
                    supplier['total_sum']
                ))

            conn.commit()
            cursor.close()
            conn.close()

            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–æ {len(all_suppliers)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def _calculate_unique_rating(self, rank, contracts_count, total_sum):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –£–ù–ò–ö–ê–õ–¨–ù–´–ô —Ä–µ–π—Ç–∏–Ω–≥"""
        try:
            # –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 4.0 –¥–æ 5.0 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
            position_factor = max(0, 1.0 - (rank / 100))
            base_rating = 4.0 + (position_factor * 1.0)

            # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            contracts_bonus = min(contracts_count / 100000, 0.3)

            # –ë–æ–Ω—É—Å –∑–∞ —Å—É–º–º—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            sum_bonus = min(total_sum / 100000000000, 0.2)

            # –°–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            random_component = (random.random() - 0.5) * 0.2

            rating = base_rating + contracts_bonus + sum_bonus + random_component
            rating = max(4.0, min(rating, 5.0))

            return round(rating, 1)

        except:
            return round(4.0 + random.random() * 0.5, 1)

    def get_available_purchase_methods(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–∫—É–ø–æ–∫"""
        return [
            "–ò–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—É—Ç–µ–º –ø—Ä—è–º–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞",
            "–ß–µ—Ä–µ–∑ —Ç–æ–≤–∞—Ä–Ω—ã–µ –±–∏—Ä–∂–∏",
            "–û—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–Ω–∫—É—Ä—Å",
            "–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
            "–ò–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ –Ω–µ—Å–æ—Å—Ç–æ—è–≤—à–∏–º—Å—è –∑–∞–∫—É–ø–∫–∞–º",
            "–ê—É–∫—Ü–∏–æ–Ω (–¥–æ 2022)",
            "–ó–∞–∫—É–ø–∫–∞ –∂–∏–ª–∏—â–∞",
            "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω",
            "–í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–º–æ—á–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è",
            "–ò–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—É—Ç–µ–º –ø—Ä—è–º–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –æ–±—É—á–∞—é—â–∏—Ö—Å—è",
            "–ê—É–∫—Ü–∏–æ–Ω (—Å 2022)",
            "–î–æ–≥–æ–≤–æ—Ä –Ω–∞ —É—Å–ª—É–≥–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞",
            "–ö–æ–Ω–∫—É—Ä—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ-–±–∞–ª–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
            "–ö–æ–Ω–∫—É—Ä—Å –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É ¬´–ø–æ–¥ –∫–ª—é—á¬ª",
            "–ö–æ–Ω–∫—É—Ä—Å —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–º –æ—Ç–±–æ—Ä–æ–º",
            "–ó–∞–∫—É–ø–∫–∞ –ø–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ—Ü–∏–∞–ª—å–Ω–æ–º—É –∑–∞–∫–∞–∑—É",
            "–ö–æ–Ω–∫—É—Ä—Å —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞",
            "–ö–æ–Ω–∫—É—Ä—Å –ø–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—é —É—Å–ª—É–≥ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–∏—Ç–∞–Ω–∏—è –≤–æ—Å–ø–∏—Ç–∞–Ω–Ω–∏–∫–æ–≤ –∏ –æ–±—É—á–∞—é—â–∏—Ö—Å—è",
            "–ö–æ–Ω–∫—É—Ä—Å –ø–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º –ø–∏—Ç–∞–Ω–∏—è –≤–æ—Å–ø–∏—Ç–∞–Ω–Ω–∏–∫–æ–≤ –∏ –æ–±—É—á–∞—é—â–∏—Ö—Å—è"
        ]

    def get_available_subject_types(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∑–∞–∫—É–ø–æ–∫"""
        return ["–¢–æ–≤–∞—Ä", "–†–∞–±–æ—Ç–∞", "–£—Å–ª—É–≥–∞"]